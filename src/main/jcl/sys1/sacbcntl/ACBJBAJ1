//IBMUSERA JOB (ACCT),'IBMUSER',MSGCLASS=H,
//      NOTIFY=IBMUSER,CLASS=A,MSGLEVEL=(1,1),TIME=(0,10)
//MYLIB JCLLIB ORDER=SYS1.SACBCNTL
//********************************************************************/
//*$MAC(ACBJBAJ1) COMP(DF123): BATCH - MC DEFINE/ALTER/DISPLAY   @A0C*/
//*                                                                  */
//* PROPRIETARY V3 STATEMENT                                         */
//* LICENSED MATERIALS - PROPERTY OF IBM                             */
//* 5650-ZOS                                                     @E1C*/
//* COPYRIGHT IBM CORP. 1996, 2013                               @E2C*/
//* END PROPRIETARY V3 STATEMENT                                     */
//*                                                                  */
//*  CHANGE ACTIVITY:                                                */
//* $L0=NAVIQUEST,HACS120,96/06/18,SNJTCS: INITIAL VERSION       @L0A*/
//* 10/14/96 CCY - HDZ11C0: Ship as SPE                      @WA22861*/
//* $T1=NQ5,HDZ11E0,061997,SNJTCS:   NaviQuest Batch Support     @T1A*/
//* $T2=K151321,HDZ11E0,091998,SNJTCS: Possible values          2@T2A*/
//*                                    documentation                 */
//* 10/18/99 TCS - HDZ11E0: Support for Uplevel SCDS update  @WA41441*/
//* 05/23/01 TCS - HDZ11F0: Prolog Updation                  @WA49380*/
//* 08/06/02 TCS - HDZ11G0: Support for defining Multiple    @WA55817*/
//*                         Management Classes               @WA55817*/
//* 08/30/05 CCY - HDZ11K0: Add table2 to step2              @AA13015*/
//* $A0=EAV    ,HDZ1A10,06/09/27,IBSTG: EAV Support              @A0A*/
//* $D1=DSRET99,HDZ1D10,10/05/18,SVLCY: Retention>9999 support   @D1A*/
//* $E1=STIERS ,HDZ2210,11/04/15,IBSTG: HSM STORAGE TIERS        @E1A*/
//* $E2=OA43011,HDZ2210,13/08/06,IBSTG: Fix incorrect copyright  @E2A*/
//*                                                                  */
//********************************************************************/
//********************************************************************
//*                                                                  *
//* SAMPLE JCL TO DEFINE/ALTER/DISPLAY MANAGEMENT CLASSES IN BATCH   *
//*                                                                  *
//*   INSTRUCTIONS BEFORE SUBMITTING:                                *
//*                                                                  *
//*     CHANGE JOBCARD                                               *
//*     CHANGE PREFIX                                                *
//*     CHANGE PARAMETERS                                            *
//*                                                                  *
//*   PARAMETER FOLLOWING ACBQBAJ1 - DEFINE or ALTER or DISPLAY      *
//* ********************** ADD BEG ***********************************
//*  (Define or Alter)                                               *
//*                                                                  *
//* Required Fields:                                     2@WA49380   *
//*                                                                  *
//*   SCDS - SCDS in which MANAGEMENT CLASS is to be DEF/ALT/DISP    *
//*                                                                  *
//*   MGMTCLAS - MANAGEMENT CLASS to be DEFINED/ALTERED/DISPLAYED    *
//*                                                                  *
//* Optional Fields:                                       2@WA49380 *
//*                                                                  *
//*   DESCR    : Type in  remarks  about the MGMTCLAS which is being *
//*              defined/altered, not  exceeding  120  chars.        *
//*                                                                  *
//*   EXPNOUSE : The datasets  will  expire if they are not used for *
//*              the number of days specified here.                  *
//*                                                              @D1C*
//*              Possible values  1 - 93000, NOLIMIT.  If NOLIMIT is *
//*              specified the DS would not expire.                  *
//*              Valid  only if retention  period or expiration date *
//*              is not specified by the end user or is not derived  *
//*              from the data class.                                *
//*                                                                  *
//*   EXPDTDY  : Datasets expires after  DATE/DAYS entered here. @D1C*
//*              Possible values   0 - 93000, YYYY/MM/DD or NOLIMIT. *
//*                                                                  *
//*   RETNLIM  : Possible values 0 - 93000, NOLIMIT.             @D1C*
//*              Use this field to control what a user or Data class *
//*              can specify for retention period or expiration date *
//*              during allocation. The affect of the values entered *
//*              in this field are explained below.                  *
//*                                                                  *
//*              0         ->  Do not  use  the RETPD and EXPDT that *
//*                            the user or Dataclass specified.      *
//*              1 - 93000 ->  Use  this  value only if the RETPD or *
//*                            EXPDT is more than this limit.    @D1C*
//*              NOLIMIT   ->  Do not set a limit to RETPD or EXPDT. *
//*                                                                  *
//*   PARTREL  : Possible values  Y, C, YI, CI or N .                *
//*              Use this field (PARTIAL RELEASE) to specify whether *
//*              allocated but unused space can be  released for DSs *
//*              in this MGMTCLS. This one applies  only to VSAM DSs *
//*              in extended format or NON-VSAM datasets. The values *
//*              entered would have following results.               *
//*                                                                  *
//*              Y  -> Release unused space automatically during the *
//*                    Space Management cycle.                       *
//*                                                                  *
//*              C  -> Unused  space  can  be released automatically *
//*                    only if a secondary allocation exists for the *
//*                    dataset.                                      *
//*                                                                  *
//*              YI -> Release unused space when a dataset is closed *
//*                    or during the Space Management cycle,whichever*
//*                    comes first.                                  *
//*                                                                  *
//*              CI -> Unused  space  for  data sets  with secondary *
//*                    allocation is released either when a data set *
//*                    is  closed  or  during  the  Space Management *
//*                    cycle, whichever comes first.                 *
//*                                                                  *
//*              N  -> Do not release unused space.                  *
//*                                                                  *
//*   PRINOUSE : Use this  field to specify when to migrate the DSs  *
//*              in this class. The possible values are              *
//*                                                                  *
//*              0         ->  To Migrate data sets  as  soon as the *
//*                            space management function of DFSMShsm *
//*                            is run and data integrity age is met. *
//*                                                                  *
//*              1 to 9999 ->  Migrate  data  sets  out  of  primary *
//*                            storage if  they have been unused for *
//*                            this number of days or longer.        *
//*                                                                  *
//*              BLANK     ->                                        *
//*                                                                  *
//*   LVINOUSE : Use this filed to  specify whether DSs  can migrate *
//*              to  LEVEL 1 storage  and  how  long they can remain *
//*              there. The possible values are,                     *
//*                                                                  *
//*              0         -> No  migration to Level 1. DSs  migrate *
//*                           directly from primary storage to LVL 2 *
//*                                                                  *
//*              1 to 9999 -> The  total  number of consecutive days *
//*                           that datasets  must  remain unaccessed *
//*                           before  becoming  eligible  to migrate *
//*                           from LVL 1 to LVL 2.                   *
//*                                                                  *
//*              NOLIMIT   -> Datasets  can  not  migrate to LEVEL 2 *
//*                           automatically, and remain in LVL 1 for *
//*                           an unlimited period.                   *
//*                                                                  *
//*              BLANK     ->                                        *
//*                                                                  *
//*   CMDORAUT : If  migration is allowed, this field determines how *
//*              the  migration is initiated. Possible values are,   *
//*                                                                  *
//*              BOTH     -> DSs  can migrate either automatically   *
//*                          or by command.                          *
//*              COMMAND  -> Data sets can migrate by command only.  *
//*                                                                  *
//*              NONE     -> Data sets cannot migrate.               *
//*                                                                  *
//*   PRIGDGEL : Valid  for  Generation  Data Group (GDG) DSs  only. *
//*              This  field  specifies  how  many  of  the  newest  *
//*              generations  of a GDG are to have  normal priority. *
//*              Possible  values  are  0 - 255 or blank.For Example *
//*              enter    100  if  you  want GDG generations  older  *
//*              than the  most recent 100, to  migrate before  non  *
//*              generation datasets.                                *
//*                                                                  *
//*   GDGROLL  : This field  specifies  whether the  Generation  DSs *
//*              in  this  MGMTCLS will expire or migrate after they *
//*              have  been  removed  from  the  GDG. The  possible  *
//*              values are, MIGRATE,EXPIRE or blank.                *
//*                                                                  *
//*   BACKUPFR : This  field  specifies the  backup frequency.   The *
//*              possible values are,                                *
//*                                                                  *
//*              0        -> Backup each dataset only when the volume*
//*                          it resides on is backed up.             *
//*              1 - 9999 -> If dataset is  changed  in the interval *
//*                          between  backups, extend  the  interval *
//*                          for atleast this many number of days.   *
//*              BLANK    ->                                         *
//*                                                                  *
//*   NUMBKDSE : Maximum  number  of  Backups  that   can   be  kept *
//*              concurrently. Possible values are, 1 - 100,BLANK.   *
//*                                                                  *
//*   NUMBKDSD : Specifies  the  maximum no of Backups to keep after *
//*              the dataset is deleted. Possible values are         *
//*                                                                  *
//*              0       -> All backups that were created are erased *
//*                         after the dataset is deleted.            *
//*              1 - 100 -> The maximum no. of backups to keep after *
//*                         a dataset has been deleted.              *
//*              BLANK    ->                                         *
//*                                                                  *
//*   RETDYDSD : Specifies how long a most recent  backup version of *
//*              a deleted dataset will be kept. Possible values are *
//*                                                                  *
//*              1 - 9999 -> After a dataset is deleted keep its most*
//*                          recent  backup  version  for these many *
//*                          days.                                   *
//*                                                                  *
//*              NOLIMIT  -> The  backup  version  will  be kept for *
//*                          unlimited period.                       *
//*                                                                  *
//*              BLANK    ->                                         *
//*                                                                  *
//*   RETDYEXT : Specifies the retention period  for  a dataset that *
//*              pre-date  the  most recent  backup. Possible values *
//*              are,                                                *
//*                                                                  *
//*              1 - 9999 -> Each backup version of a  dataset other *
//*                          than the  recent copy will be  kept for *
//*                          these many days.                        *
//*                                                                  *
//*              NOLIMIT  -> All  backup  versions will  be kept for *
//*                          unlimited period.                       *
//*                                                                  *
//*              BLANK    ->                                         *
//*                                                                  *
//*   CMDBKUP  : Specifies who will have authority to perform command*
//*              backups. Possible values are,                       *
//*                                                                  *
//*              ADMIN  -> Only Storage Administrator ,              *
//*                                                                  *
//*              BOTH   -> Both Storage Administrator and end users. *
//*                                                                  *
//*              NONE   -> Neither end user nor Storage Administrator*
//*                                                                  *
//*   AUTOBKUP : Specifies whether the datasets in this  MGMTCLS are *
//*              eligible for automatic backup. Possible  values are *
//*              Y -> Yes , N -> No                                  *
//*                                                                  *
//*   BKUPTECH : Specifies  BACKUP COPY TECHNIQUE to be used.        *
//*              Possible values are,                                *
//*                                                                  *
//*              R  -> Concurrent copy technique must be used.       *
//*              P  -> Concurrent copy technique should be used.     *
//*              S  -> With out the concurrent copy technique.       *
//*              VR -> Virtual concurrent copy technique        9@A0A*
//*                    must be used.                                 *
//*              VP -> Virtual concurrent copy technique             *
//*                    should be used.                               *
//*              CR -> Cache-based concurrent copy technique         *
//*                    must be used.                                 *
//*              CP -> Cache-based concurrent copy technique         *
//*                    should be used.                               *
//*                                                                  *
//*   TMSCYRS  : No of years  that must pass since the creation date *
//*              before class transition occurs. Possible values are *
//*              0 - 9999, or BLANK.                                 *
//*                                                                  *
//*   TMSCMTH  : No of months that must pass since the creation date *
//*              before class transition occurs. Possible values are *
//*              0 - 9999, or BLANK.                                 *
//*                                                                  *
//*   TMSCDYS  : No of days   that must pass since the creation date *
//*              before class transition occurs. Possible values are *
//*              0 - 9999, or BLANK.                                 *
//*                                                                  *
//*   TMSLUYRS : No of years that must pass since the last reference *
//*              date before class transition occurs.Possible values *
//*              are 0 - 9999, or BLANK.                             *
//*                                                                  *
//*   TMSLUMTH : No of months that must pass since the last reference*
//*              date before class transition occurs.Possible values *
//*              are 0 - 9999, or BLANK.                             *
//*                                                                  *
//*   TMSLUDYS : No of days  that must pass since the last reference *
//*              date before class transition occurs.Possible values *
//*              are 0 - 9999, or BLANK.                             *
//*                                                                  *
//*   PMTHODAY : The day of the month that class transition occurs.  *
//*              Possible values, 1 - 31, FIRST, LAST or BLANK       *
//*                                                                  *
//*   PQUAODAY : The day of the each quarter the CT occurs.          *
//*              Possible values, 1 - 92, FIRST, LAST or BLANK       *
//*                                                                  *
//*   PQUAIMTH : Month of each quarter the CT occurs.                *
//*              Possible values, 1 - 3, or BLANK                    *
//*                                                                  *
//*   PYRLODAY : The day of each year the CT occurs.                 *
//*              Possible values, 1 - 366,FIRST,LAST or BLANK        *
//*                                                                  *
//*   PYRLIMTH : The month of each year the CT occurs.               *
//*              Possible values, 1 - 12, or BLANK                   *
//*                                                                  *
//*   VERSIONS : Specify  how  many versions of an  aggregate  group *
//*              associated  with  the  management  class  are to be *
//*              maintained. Possible values are 1 - 9999, NOLIMT or *
//*              BLANK. If BLANK is specified no aggregate group BKP *
//*              is maintained.                                      *
//*                                                                  *
//*   RTNOVERS : Specify  how  long the only version of an aggregate *
//*              group is kept. Possible values are 1 - 9999,NOLIMIT *
//*              or BLANK.                                           *
//*                                                                  *
//*   RTOVUNIT : Specify  the  unit of measure for the length of time*
//*              specified in the above field. Possible  values  are *
//*              D -> Days, W -> Weeks, M -> Months, Y -> Years  and *
//*              BLANK.                                              *
//*                                                                  *
//*   RTNEVERS : Specify the  time  periods for which backup versions*
//*              of an aggregate group are to be kept.Possible values*
//*              are 1 - 9999,NOLIMIT and BLANK.                     *
//*                                                                  *
//*   RTEVUNIT : Specify the unit  of measure for the length of time *
//*              specified in the above field. Possible  values  are *
//*              D -> Days, W -> Weeks, M -> Months, Y -> Years  and *
//*              BLANK.                                              *
//*                                                                  *
//*   CPYSERLN : Specifies  whether you want  processing of a backup *
//*              copy of an aggregate group to continue if a  shared *
//*              enqueue cannot be obtained for the  datasets  being *
//*              backed up. Possible values are,                     *
//*              C -> Continue, F -> Fail or BLANK.                  *
//*                                                                  *
//*   ACPYTECH : Specifies ABACKUP COPY TECHNIQUE to be used.        *
//*              Possible values are,                                *
//*                                                                  *
//*              R  -> Concurrent copy technique must be used.       *
//*              P  -> Concurrent copy technique should be used.     *
//*              S  -> With out the concurrent copy technique.       *
//*              VR -> Virtual concurrent copy technique        9@A0A*
//*                    must be used.                                 *
//*              VP -> Virtual concurrent copy technique             *
//*                    should be used.                               *
//*              CR -> Cache-based concurrent copy technique         *
//*                    must be used.                                 *
//*              CP -> Cache-based concurrent copy technique         *
//*                    should be used.                               *
//*                                                                  *
//*  TRCPYTECH : Specifies which copy technique should be used  9@E1A*
//*              for the class transition of data associated with    *
//*              this management class. Possible values are          *
//*              FRP -> FR PREFERRED.                                *
//*              FRR -> FR REQUIRED.                                 *
//*              STD -> STANDARD.                                    *
//*              PMP -> FC PRESMIRPREF.                              *
//*              PMR -> FC PRESMIRREQ.                               *
//*                                                                  *
//* SERIALERREX: Specifies the database/exit to invoke when     5@E1A*
//*              there is a serialization error. Possible values are *
//*              DB2, CICS, ZFS, EXIT -> invokes an user exit, or    *
//*              NONE.                                               *
//*                                                                  *
//*   UPDHLVLSCDS: When modifying an SCDS, that was formatted with a *
//*                higher level of SMS, using a lower level of SMS   *
//*                will make this application fail unless you        *
//*                specify the UPDHLVLSCDS parameter as 'Y'.         *
//*                Default is 'N'.                           @WA41441*
//*                                                                  *
//*                Possible values : Y/N/BLANK               @WA41441*
//************************ ADD END ***********************************
//********************************************************************
//*
//*   STEP1 - SET UP PARAMETERS
//*
//********************************************************************
//STEP1   EXEC ACBJBAOB,
//        TABL2=userid.TEST.ISPTABL
//SYSUDUMP DD  SYSOUT=*
//TEMPFILE  DD  DSN=&&TEMPFILE,DISP=(MOD,PASS),
//  SPACE=(TRK,(1,1)),LRECL=300,RECFM=F,BLKSIZE=300
//SYSTSIN  DD *
PROFILE PREFIX(IBMUSER)
ISPSTART CMD(ACBQBAJ1 DEFINE/ALTER +
SCDS(TEMP.SCDS) +
MGMTCLAS() +
DESCR() +
EXPNOUSE() +
EXPDTDY() +
RETNLIM() +
PARTREL() +
PRINOUSE() +
LVINOUSE() +
CMDORAUT() +
PRIGDGEL() +
GDGROLL() +
BACKUPFR() +
NUMBKDSE() +
NUMBKDSD() +
RETDYDSD() +
RETDYEXT() +
CMDBKUP() +
AUTOBKUP() +
BKUPTECH() +
TMSCYRS() +
TMSCMTH() +
TMSCDYS() +
TMSLUYRS() +
TMSLUMTH() +
TMSLUDYS() +
PMTHODAY() +
PQUAODAY() +
PQUAIMTH() +
PYRLODAY() +
PYRLIMTH() +
VERSIONS() +
RTNOVERS() +
RTOVUNIT() +
RTNEVERS() +
RTEVUNIT() +
CPYSERLN() +
ACPYTECH() +
TRCPYTECH() +
SERIALERREX() +
UPDHLVLSCDS() +
)
/*
//********************************************************************
//*
//*   STEP2 - EXECUTE THE DEFINE/ALTER
//*
//********************************************************************
//STEP2   EXEC ACBJBAOB,
//        TABL2=userid.TEST.ISPTABL
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD DSN=&&TEMPFILE,DISP=(OLD,DELETE,DELETE)
//********************************************************************
//*
//*   STEP3 - SET UP PARAMETERS
//*
//********************************************************************
//STEP3   EXEC ACBJBAOB,
//        TABL2=userid.TEST.ISPTABL
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD *
PROFILE PREFIX(IBMUSER)
ISPSTART CMD(ACBQBAJ1 DISPLAY +
SCDS(TEMP.SCDS) +
MGMTCLAS() +
)
/*
